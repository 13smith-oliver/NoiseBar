/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.noisebar;

import java.awt.Color;
import java.io.ByteArrayOutputStream;
import javax.sound.sampled.*;
/**
 *
 * @author Oliver
 */
public class noiseBarUi extends javax.swing.JFrame {

    /**
     * Creates new form noiseBarUi
     */
    public noiseBarUi() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        redLabel = new javax.swing.JLabel();
        orangeLabel = new javax.swing.JLabel();
        yellowLabel = new javax.swing.JLabel();
        greenLabel = new javax.swing.JLabel();
        darkGreenLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Noise Bar");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        setMaximumSize(new java.awt.Dimension(1000, 5000));
        getContentPane().setLayout(new java.awt.GridLayout(5, 0));

        redLabel.setBackground(new java.awt.Color(255, 0, 0));
        redLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        redLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        redLabel.setText("Too Loud!");
        redLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        redLabel.setMaximumSize(new java.awt.Dimension(200, 1000));
        redLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        redLabel.setOpaque(true);
        redLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        getContentPane().add(redLabel);

        orangeLabel.setBackground(new java.awt.Color(255, 140, 0));
        orangeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        orangeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orangeLabel.setText("Loud!");
        orangeLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        orangeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        orangeLabel.setMaximumSize(new java.awt.Dimension(200, 1000));
        orangeLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        orangeLabel.setOpaque(true);
        orangeLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        getContentPane().add(orangeLabel);

        yellowLabel.setBackground(new java.awt.Color(255, 255, 0));
        yellowLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        yellowLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yellowLabel.setText("Noisy!");
        yellowLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        yellowLabel.setMaximumSize(new java.awt.Dimension(200, 1000));
        yellowLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        yellowLabel.setOpaque(true);
        yellowLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        getContentPane().add(yellowLabel);

        greenLabel.setBackground(new java.awt.Color(173, 255, 47));
        greenLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        greenLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        greenLabel.setText("Okay!");
        greenLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        greenLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        greenLabel.setMaximumSize(new java.awt.Dimension(200, 1000));
        greenLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        greenLabel.setOpaque(true);
        greenLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        getContentPane().add(greenLabel);

        darkGreenLabel.setBackground(new java.awt.Color(0, 255, 0));
        darkGreenLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        darkGreenLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        darkGreenLabel.setText("Very Good!");
        darkGreenLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        darkGreenLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        darkGreenLabel.setMaximumSize(new java.awt.Dimension(200, 1000));
        darkGreenLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        darkGreenLabel.setOpaque(true);
        darkGreenLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        getContentPane().add(darkGreenLabel);

        pack();
        
        setVisible(true);
    }// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(noiseBarUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        AudioFormat format = new AudioFormat(48000, 16, 1, true, true);
        TargetDataLine line;
        line = null;
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, 
            format); // format is an AudioFormat object
        if (!AudioSystem.isLineSupported(info)) {
            System.out.println("line not supported");
        }
        
        // Obtain and open the line.
        try {
            line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(format);
        } catch (LineUnavailableException ex) {
            System.out.println("error");
        }
        ByteArrayOutputStream out  = new ByteArrayOutputStream();
        int numBytesRead;
        byte[] data = new byte[line.getBufferSize() * 1];

        // Begin audio capture.
        line.start();
        
        noiseBarUi nbu = new noiseBarUi();
        
        int level = 0;
        while (true) {
            numBytesRead =  line.read(data, 0, data.length);
            // Save this chunk of data.
            out.write(data, 0, numBytesRead);
            level = nbu.calculateRMSLevel(data);
            nbu.changeColors(level);
        } 
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel darkGreenLabel;
    private javax.swing.JLabel greenLabel;
    private javax.swing.JLabel orangeLabel;
    private javax.swing.JLabel redLabel;
    private javax.swing.JLabel yellowLabel;
    // End of variables declaration                   

    public int calculateRMSLevel(byte[] audioData)
    {
        long lSum = 0;
        for(int i=0; i < audioData.length; i++)
            lSum = lSum + audioData[i];
        
        double dAvg = lSum / audioData.length;
        double sumMeanSquare = 0d;
        
        for(int j=0; j < audioData.length; j++)
            sumMeanSquare += Math.pow(audioData[j] - dAvg, 2d);
        
        double averageMeanSquare = sumMeanSquare / audioData.length;
        
        return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
    }
    
    private void changeColors(int level) {
        resetColors();
        if (level > 65){
            redLabel.setBackground(new Color(255,0,0));
        }
        else if (level > 60 && level <= 65) {
            orangeLabel.setBackground(new Color(255,140,0));
        }
        else if (level > 55 && level <= 60) {
            yellowLabel.setBackground(new Color(255,255,0));
        }
        else if (level > 50 && level <= 55) {
            greenLabel.setBackground(new Color(173,255,47));
        }
        else if (level < 50) {
            darkGreenLabel.setBackground(new Color(0,255,0));
        }
    }
    private void resetColors() {
        redLabel.setBackground(new Color(110,110,110));
        orangeLabel.setBackground(new Color(110,110,110));
        yellowLabel.setBackground(new Color(110,110,110));
        greenLabel.setBackground(new Color(110,110,110));
        darkGreenLabel.setBackground(new Color(110,110,110));
    }
}

